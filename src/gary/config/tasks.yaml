job_analysis_task:
  description: >
    Analyze the job description and extract all skills, requirements, and company signals for ATS optimization.

    **Extract and categorize:**

    Skills - Separate into technical (programming languages, tools, platforms, certifications), soft (communication, problem-solving),
    management (leadership, stakeholder management, strategic planning), and bonus/nice-to-have qualifications.
    Use exact terminology including abbreviations and version numbers.

    Responsibilities & Qualifications - Extract complete phrases covering duties, requirements, and qualifications.
    Strip buzzwords like "rockstar," "synergy," "disruptive" but preserve core meaning and industry-specific terminology.
    Include quantifiable requirements (years of experience, education). Flag repeated or emphasized phrases as high priority.

    Company Signals - Identify tone/priorities (fast-paced, collaborative, data-driven, innovative) and cultural values
    (diversity, growth mindset, work-life balance, mission alignment). Exclude generic marketing language.

    **Quality standards:**
    - Comprehensive: capture every substantive skill and requirement
    - Precise: use exact terminology from job description
    - Deduplicated: each item appears once across all categories
    - Actionable: focus on concrete, verifiable qualifications over vague attributes
        
        
    Job Description:
    ```
    {job_description}
    ```

  expected_output: >
    Complete JobAnalysis object with categorized extraction. No preamble or explanatory text.

resume_tailoring_task:
  description: >
    Transform master resume into ATS-optimized document that authentically matches target role using JobAnalysis report.

    **INPUT VALIDATION:**
    - Verify JobAnalysis contains: skills (technical/soft/management/bonus), responsibilities_and_qualifications, tone_and_priorities
    - Confirm master resume has: work experience (titles/dates/bullets), skills, education
    - Calculate skill overlap: If <30% match between master resume skills and JobAnalysis technical skills, STOP and output:
      {"error": "fundamental_mismatch", "overlap_percentage": X, "message": "Insufficient alignment between candidate background and role requirements"}

    **CORE PRINCIPLES (Apply to ALL steps):**
    1. **AUTHENTICITY** - Never fabricate skills/experience not in master resume. Never change seniority level (Junior→Senior) or core function (Analyst→Scientist).
    2. **KEYWORD OPTIMIZATION** - Target 50-70% coverage from JobAnalysis. Prioritize keyword placement: Summary > Recent Role > Projects > Earlier Roles. Max 3 uses per keyword.
    3. **NATURAL LANGUAGE** - Vary sentence structures. Avoid AI patterns: "leveraged/spearheaded" (unless tied to specific metrics), "synergy", robotic repetition.
    4. **DEMONSTRATION** - Show soft/management skills through examples, NEVER list them. Technical skills only in Skills section.
    5. **RECENCY** - Focus 70% content on last 5 years of experience. Condense older roles to 2-3 bullets max.

    **STEP 1 - KEYWORD ANALYSIS & MAPPING:**
    Extract from JobAnalysis: `skills.technical` (Skills section), `skills.soft` (demonstrate in bullets), `skills.management` (show through leadership examples),
    `skills.bonus` (differentiators if possessed), `responsibilities_and_qualifications` (repeated phrases = highest priority). Map authentic master resume experiences to requirements.

    **STEP 2 - PROFESSIONAL SUMMARY (50-80 words):**
    Structure: [Job title + years] → [2-3 expertise areas] → [quantified achievement]. Weave 3-5 high-priority keywords naturally.
    Adapt tone to JobAnalysis: Fast-paced → dynamic verbs; Data-driven → metrics-heavy; Collaborative → team language; Innovative → new solutions.
    Example: "Software Engineer with 8+ years building scalable AWS infrastructure. Led microservices handling 50M+ daily requests, reducing latency 40%."

    **STEP 3 - WORK EXPERIENCE:**

    **Title Handling:** Align most recent title ONLY if functionally identical (Developer<-->Engineer OK, Analyst<-->Scientist NOT OK). When unclear, keep original and emphasize relevant duties in bullets.

    **Bullets (5-6 for recent roles, 2-3 for older roles per RECENCY principle):**
    - **Review ALL master resume bullets** for each role. Select most relevant content—combine related achievements to preserve impactful details without losing key information.
    - STAR format: Action + Quantifiable Result (15-30 words, max 35 for complex achievements)
    - **Include metrics where authentic** (1-2 per bullet max). Use %, K, M format consistently. No metrics? Emphasize scope, complexity, or technical depth instead.
    - Examples: Collaboration = "Partnered with X team of N..."; Mentorship = "Mentored N engineers, improving Y by Z%"; Leadership = "Led initiative resulting in..."
    - Vary action verbs: Technical (Architected, Built, Optimized); Leadership (Led, Mentored); Analysis (Investigated, Analyzed)
    - Integrate keywords from `skills.technical` and repeated phrases from `responsibilities_and_qualifications` naturally where authentic fit exists

    **STEP 4 - SKILLS:**
    Filter master skills to match `skills.technical`. Organize: Programming Languages | Frameworks | Databases | Cloud Platforms | Developer Tools | Methodologies.
    Use exact names (JavaScript not Javascript). Include `skills.bonus` if possessed.
    **Implied Skills Rule:** Add ONLY if technological prerequisite (Django→Python OK; AWS→Distributed Systems NOT OK).

    **STEP 5 - PROJECTS:**
    2-4 sentences: Problem → Solution → Result. Feature `skills.bonus` technologies not covered in work experience. Include metrics if available.

    **STEP 6 - EDUCATION:**
    List up to 5 courses matching `skills.technical` or `responsibilities_and_qualifications`. Use natural phrasing: "Relevant coursework includes..."

    **STEP 7 - SELF-CHECK:**
    Verify adherence to CORE PRINCIPLES and keyword distribution targets. Confirm: no pronouns (I/me/we), consistent tense (past for previous/present for current).

    **Master Resume:**
    ```
    {master_resume}
    ```

  expected_output: >
    Single JSON object adhering to `ResumeContent` Pydantic model. NO preamble, explanations, or markdown formatting—JSON only.

resume_validation_task:
  description: >
    Validate the tailored resume against the job analysis to ensure quality, keyword integration,
    and readiness for document generation. Use the context from previous tasks (job analysis and
    tailored resume) to perform comprehensive analysis and provide actionable feedback.

    **Validation Criteria:**

    **1. Keyword Integration Analysis:**
    - Count total keywords from job analysis (technical skills, soft skills, management skills, and key terms)
    - Identify which keywords appear in the resume
    - Calculate integration rate (percentage of keywords included)
    - Classify keywords as naturally integrated vs. forced/awkwardly placed
    - Identify missing critical keywords that should be added
    - Check for keyword stuffing (same keyword repeated excessively)

    **2. Phrase Usage Analysis:**
    - Verify that responsibilities and qualifications from job analysis are reflected in resume
    - Check if industry-specific terminology is used correctly and in proper context
    - Identify phrases that sound unnatural or AI-generated ("leveraged," "spearheaded," "synergy")
    - Note important phrases from job description that should be incorporated

    **3. ATS Compatibility Check:**
    - Evaluate keyword density and distribution across resume sections
    - Verify technical skills are explicitly stated (not just implied)
    - Check if quantifiable achievements are present
    - Assess overall structure and formatting compatibility
    - Score from 0-100 based on ATS optimization

    **4. Human Readability Assessment:**
    - Evaluate natural language flow and sentence variety
    - Identify robotic patterns or AI-generated phrases
    - Check for authentic voice and third-person consistency
    - Assess if experience sounds genuine vs. fabricated
    - Score from 0-100 based on human readability

    **5. Quality Feedback:**
    - List 3-5 specific strengths of the resume
    - List 3-5 weaknesses or areas for improvement
    - Provide 3-5 actionable suggestions for enhancement
    - Calculate overall score (weighted: 40% keyword integration, 30% ATS score, 30% readability)

    **6. Pass/Fail Determination:**
    - Resume passes if: overall score >= 75, ATS score >= 70, readability score >= 70, integration rate >= 60%
    - Resume is ready for generation if: passed_validation = True AND no critical keywords missing

    **Note:** Do NOT use the document generation tool. The validation report will be used by the main
    workflow to generate the document. Focus only on validation and providing the comprehensive report.

  expected_output: >
    A comprehensive ResumeValidationReport JSON object that includes all analysis, scores, feedback,
    and pass/fail determination based on the job analysis and tailored resume from previous tasks.
    Do not include any preamble or extra text outside of the JSON object.
